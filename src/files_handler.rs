use std::{fs, process::Command};

// This class is used for storing the names 
// of files and directories that are used
// throughout all the phases of the compiler.
pub struct FilesHandler {
    // The file path of the YAL source code file.
    pub yal_source_code_file_path: String,

    // The file path of the YAL source code file, without the file name.
    pub yal_source_code_path: String,

    // The source code contained in the YAL source code file.
    pub yal_source_code: String,

    // The name of the output file(s) that will be produced.
    // This is just the name of the file(s), without the extensions.
    // Defaults to the provided name of the YAL source code file.
    pub output_file_name: String,

    // The file path of the MIXAL output file. This file 
    // is used to store the MIXAL instructions that are
    // produced by the assembler. It defaults to:
    // /<yal_source_code_path>/bin/<output_file_name>.mixal
    pub mixal_output_file_path: String,

    // The file path for the MIX output file. This is
    // a binary file that is generated by running the
    // `mixasm` command for a MIXAL output file. This 
    // file can be executed using the `mixvm` command.
    // It defaults to: /<yal_source_code_path>/bin/<output_file_name>.mix 
    pub mix_output_file_path: String,
}

impl FilesHandler {
    pub fn new(yal_source_code_file_path: &String) -> FilesHandler {
        let yal_source_code_file_path = yal_source_code_file_path.clone();
        let yal_source_code_path = yal_source_code_file_path.rsplit_once("/").expect("to split").0.to_string();
        let yal_source_code = fs::read_to_string(yal_source_code_file_path.clone()).expect("File to exist");
        let output_file_name = yal_source_code_file_path.clone().split("/").last().unwrap().split(".").next().unwrap().to_string();

        Command::new("mkdir").arg("-p").arg(format!("{}/bin", yal_source_code_path)).output().expect("failed to execute process");

        let mixal_output_file_path = format!("{}/bin/{}.mixal", yal_source_code_path, output_file_name);
        let mix_output_file_path = format!("{}/bin/{}.mix", yal_source_code_path, output_file_name);
        
        FilesHandler { 
            yal_source_code_file_path, 
            yal_source_code_path,
            yal_source_code, 
            output_file_name, 
            mixal_output_file_path, 
            mix_output_file_path
        }
    }    
}
